<?php

/*
 *
 */
function cforge_launch_menu() {
  $items['admin/people/launch'] = array(
    'title' => 'Launch',
    'description' => 'Mail all users with new password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cforge_launch'),
    'access arguments' => array('local admin'),//or user 1
    'weight' => 50
   );
  if (module_exists('cforge_hosted')) {
    $items['admin/people/launch']['menu_name'] = 'setup';
  }
  return $items;
}

function cforge_launch_menu_alter($items) {
  //after launch, override the password reset login function so it doesn't expire after 24 hours
  $items['user/reset/%/%/%']['page arguments'][0] = 'cforge_user_pass_reset';
}

/*
 * Launch sequence
 */
//menu_callback drupal_get_form argument: provide a checklist and lauch button
function cforge_launch($form_state) {
  $def = variable_get('cf_welcome', NULL) ? variable_get('cf_welcome', NULL) : t("Hello [user:name],
We have launched our new site!
You can now add your offers and wants, and record your transactions on the website.
Don't worry, it's easy and fun, and you can't break anything, so go ahead and have a go.
Once you've logged in with the link below, please change your password. And while you're at it, check your personal details and save your profile page.
Have a nice visit, we'll see you on the site.
!site Team") . "
=======================
";

  $form['cf_welcome'] = array(
    '#title' => t('Welcome message'),
    '#description' => t("This text will be injected at the top of the !mail reminder", array('!mail' => l(t('Password recovery email'), 'admin/user/settings')) ),
    '#type' => 'textarea',
    '#rows' => 10,
    '#default_value' => $def,
    '#weight' => 0,
  );
  $form['token_tree'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('user'),
    '#global_types' => FALSE,
    '#weight' => 1,
  );
  $form['testmail'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test mail'),
    '#description' => t('Send a test mail to yourself. WARNING! This will log you out.'),
    'sendtest' => array(
      '#type' => 'submit',
      '#value' => t('Send test mail'),
      '#submit' => array('cforge_test_launch'),
    ),
    '#weight' => 2,
  );
  $form['actions'] = array(
    '#weight' => 10,
    'launch' => array(
      '#type' => 'submit',
      '#value' => t('LAUNCH NOW!'),
      '#submit' => array('cforge_launch_now'),
      '#weight' => 1,
    ),
    'dontlaunch' => array(
      '#type' => 'submit',
      '#value' => t('Never launch'),
      '#submit' => array('cforge_launch_disable'),
      '#weight' => 2,
    )
  );
  return $form;
}


function cforge_test_launch($form, $form_state) {
  variable_set('cf_welcome', $form_state['values']['cf_welcome']);
  cf_welcome_send($GLOBALS['user']->uid);
  drupal_set_message(t('Notified @mail', array('@mail' => $GLOBALS['user']->mail)));
  module_load_include('pages.inc', 'user');
  user_logout();
}
function cforge_launch_now($form, $form_state) {
  variable_set('cf_welcome', $form_state['values']['cf_welcome']);
  $traders = cache_get('mc_trader_list');
  foreach(array_keys($traders->data) as $uid){
    cf_welcome_send($uid);
  }
  cforge_launch_disable();
}
function cf_welcome_send($uid){
  $params['user'] = user_load($uid);
  //cf isn't a module but it's only used to call the wrapper function below
  $mail = drupal_mail('cf_launch', 'password_reset', $params['user']->mail, user_preferred_language($params['user']), $params);
  empty($mail) ?
    drupal_set_message(t('Failed to mail @mail', array('@mail' => $params['user']->mail)), 'warning') :
    drupal_set_message(t('Notified @mail', array('@mail' => $params['user']->mail)));
}

//wrapper function to inject the mail ahead of the body
function cf_launch_mail($key, &$message, $variables) {
  if ($key == 'password_reset') {
    $message['subject'] = t('Site launch:') .' '. variable_get('site_name');
    $message['body'][] = token_replace(
      variable_get('cf_welcome') . variable_get('user_mail_password_reset_notify'),
      $variables,
      array('callback' => 'user_mail_tokens')
    );
  }
}

/*
 * Menu (alter) callback; process one time login link and redirects to the user page on success.
 * this is identical to user_pass_reset, except it doesn't check for expiry
 */
function cforge_user_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  module_load_include('pages.inc', 'user');
  global $user;

  // Check if the user is already logged in. The back button is often the culprit here.
  if ($user->uid) {
    drupal_set_message(t('You have already used this one-time login link. It is not necessary to use this link to login anymore. You are already logged in.'));
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400;
    $current = time();
    // Some redundant checks for extra security ?
    if ($timestamp < $current && $account = user_load(array('uid' => $uid, 'status' => 1)) ) {
      // Deny one-time login to blocked accounts.
      if (drupal_is_denied('user', $account->name) || drupal_is_denied('mail', $account->mail)) {
        drupal_set_message(t('You have tried to use a one-time login for an account which has been blocked.'), 'error');
        drupal_goto();
      }

      if ($account->uid && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_authenticate_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_authenticate_finalize($form_state['values']);
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));
          drupal_goto('user/'. $user->uid .'/edit');
        }
        else {
          $form['message'] = array('#value' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to login to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#value' => '<p>'. t('This login can be used only once.') .'</p>');
          $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link which has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}


/*
 * for use with the user import framework (uif)
 */
/**
 * Implementation of hook_uif_help().
 */
function cforge_launch_uif_help() {
  $items = array(
    t('First name (required)'),
    t('Family name (required)'),
    t('Phone numbers, separated by colons'),
    t('Locality, or area code'),
    t('Responsibility'),
    t('Adress'),
    t('Notes, visible only to committee'),
    t('Created date')
  );

  return '<p>' . t('The following fields are available:') . '</p>' . theme('item_list', array('items' => $items));
}


/**
 * implements uif hook_uif_pre_create
 * Assign core fields during create
 */
function cforge_launch_uif_pre_create($account, $user_data, $form_state) {
  $fields = array();
  $fields = array(
    'profile_firstname',
    'profile_familyname',
    'profile_responsibility',
    'profile_phone1',
    'profile_address',
    'profile_notes',
    'profile_locality',
  );
  foreach($fields as $field_name) {
    if ($field_name == 'profile_phone1') {
      foreach(implode(';', $user_data['profile_phone1']) as $delta => $number) {
        $fields['profile_phone1'][LANGUAGE_NONE][$delta]['value'] = $number;
      }
    }
    else {
      $fields[$field_name][LANGUAGE_NONE][0]['value'] = @$user_data[$field_name];
    }
  }
  return $fields;
}

/**
 * implements uif hook_uif_post_create
 * Attempt to fix user created date
 */
function cforge_launch_uif_post_create($account, $user_data, $form_state) {
  if (empty($user_data['created'])) return;
  if (!is_integer($user_data['created'])) {
    $user_data['created'] = strtotime($user_data['created']);
  }
  if (is_integer($user_data['created'])) {
    db_update('users')->fields(array('created' => $user_data['created']))->condition('uid', $account->uid)->execute();
  }
}

/**
 * Implementation of hook_uif_validate_header().
 */
function cforge_launch_uif_validate_header($header, $form_state) {
  $errors = array();
  if (!in_array('profile_firstname', $header)) {
    return array(t("Fieldname '@field' is missing from the csv header.", array('@field' => $field)));
  }
}

/*
 * implements hook_disable
 */
function cforge_launch_disable() {
  variable_del('cf_welcome');
  $mlids = db_query("SELECT mlid FROM {menu_links} WHERE module = 'cforge_launch'")->fetchCol();
  foreach ($mlids as $mlid) {
    menu_delete_item($mlid);
  }
  drupal_set_message("Best to disable modules 'uif', 'mcapi_import'");
}
