<?php

drupal_load('profile', 'cforge');


/**
 * implements hook_install_tasks
 */
function cforge_install_tasks() {
  $tasks = array(
    'cforge_setup_types_fields' => array(
      'display_name' => st('Create content types')
    ),
    'cforge_setup_user_fields' => array(
      'display_name' => st('Create user profile fields')
    ),
    //swopping these next two around for an experiment...
    'cforge_setup_basic' => array(
      'display_name' => st('Setup the basics')
    ),
    'cforge_update_7005' => array(
      'display_name' => st('Harmonise with upgraded sites')
    ),
    //this step is optional and can be commented out
    'cforge_setup_theme_menu' => array(
      'display_name' => st('Setup theme & menus')
    ),
  );
  return $tasks;
}




function cforge_form_install_configure_form_alter(&$form) {
  $form['site_information']['site_name']['#default_value'] = $_SERVER['SERVER_NAME'];
  $form['admin_account']['#description'] = st('The username is comprised of the first name and family name');
  $form['admin_account']['account']['name']['#type'] = 'hidden';
  $form['admin_account']['account']['name']['#value'] = 'placeholder';
  $form['admin_account']['account']['profile_firstname'] = array(
    '#weight' => -10,
    LANGUAGE_NONE => array(
      0 => array(
        'value' => array(
          '#type' => 'hidden',
          '#value' => $_SERVER['SERVER_NAME'],
        )
      )
    )
  );

  if (!strpos($_SERVER["HTTP_HOST"], 'ommunityforge.net')) return;

  $form['admin_account']['account']['mail']['#default_value'] = 'tim@communityforge.net';
  $form['server_settings']['date_default_timezone']['#default_value'] = 'CET';
}

/*
 * implements hook_install
 */
function cforge_setup_types_fields() {
  //create node types
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Web page'),
      'base' => 'node_content',
      'description' => st("Permanent content, accessible through one of the three menus."),
      'custom' => FALSE,
      'locked' => TRUE,
    ),
    array(
      'type' => 'story',
      'name' => st('News'),
      'base' => 'node_content',
      'description' => st("Transient content that appears on the news page, and allows comments from members."),
      'custom' => FALSE,
      'locked' => TRUE,
    ),
  );
  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    cforge_add_body_field('node', $type->type, t('Body'));
  }

  //create the upload field
  $upload = array(
    'translatable' => '0',
    'settings' => array(
      'display_field' => 1,
      'display_default' => 1,
      'uri_scheme' => 'public',
      'default_file' => 0,
    ),
    'entity_types' => array(),
    'indexes' => array(
      'fid' => array(
        'fid',
      ),
    ),
    'field_name' => 'upload',
    'type' => 'file',
    'module' => 'file',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '-1',
    'deleted' => '0',
    'columns' => array(
      'fid' => array(
        'description' => 'The {file_managed}.fid being referenced in this field.',
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'display' => array(
        'description' => 'Flag to control whether this file should be displayed when viewing content.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'description' => array(
        'description' => 'A description of the file.',
        'type' => 'text',
        'not null' => FALSE,
      )
    ),
    'bundles' => array(
      'node' => array(),
    )
  );
  field_create_field($upload);

  //create roles
  //we don't use the drupal API for this because it doesn't allow for creation of roles with predetermined rids
  //use REPLACE because its good practice while developing an installation profile!
  db_query("REPLACE INTO {role} (rid, name)
      VALUES (:trader, 'trader'), (:committee, 'committee'), (:accountant, 'accountant'), (:system, 'system');",
    array(':trader' => RID_TRADER, ':committee' => RID_COMMITTEE, ':accountant' => RID_ACCOUNTANT, ':system' => RID_SYSTEM)
  );
}


function cforge_setup_user_fields() {
  $profile_fields = array(
    array(
      'title' => t('First name'),
      'description' => '',
      'name' => 'profile_firstname',
      'type' => 'textfield',
      'weight' => -5,
      'required' => 1,
      'register' => 1
    ),
    array(
      'title' => t('Family name'),
      'description' => '',
      'name' => 'profile_familyname',
      'type' => 'textfield',
      'weight' => -4,
      'required' => 0,
      'register' => 1
    ),
    array(
      'title' => t('Responsibility'),
      'description' => t('Job title, for committee members only'),
      'name' => 'profile_responsibility',
      'type' => 'textfield',
      'weight' => -3,
      'required' => 0,
      'register' => 0,
    ),
    array(
      'title' => t('Phone Numbers'),
      'description' => '',
      'name' => 'profile_phone1',
      'type' => 'textfield',
      'weight' => 0,
      'required' => 0,
      'register' => 1
    ),
    array(
      'title' => t('Address'),
      'description' => '',
      'name' => 'profile_address',
      'type' => 'textarea',
      'weight' => 5,
      'required' => 0,
      'register' => 1,
    ),
    array(
      'title' => t('Area Code'),
      'description' => t('This may be the zip code, or some other way to group the members geographically'),
      'name' => 'profile_locality',
      'type' => 'textfield',
      'weight' => 10,
      'required' => 0,
      'register' => 1
    ),
    array(
      'title' => t('Notes'),
      'description' => t('This is for any additional notes about the member (committee only can see).'),
      'name' => 'profile_notes',
      'type' => 'textarea',
      'weight' => 20,
      'required' => 0,
      'register' => 0
    )
  );
  module_load_include('info.inc', 'field');
  _field_info_collate_types(TRUE);
  foreach($profile_fields as $row) {
    cforge_setup_profile_field($row, $row['name']);
  }

  variable_set('cf_profile_permissions', array(
    'profile_responsibility' => '1',
    'profile_phone1' => '1',
    'profile_address' => '2',
    'profile_locality' => '1',
    'profile_notes' => '3',
    'profile_postal' => '2',
  ));

  //better install these modules sooner I think
  $modules[] = 'offers_wants';
  $modules[] = 'mcapi_signatures';
  $modules[] = 'community_tasks';//this is not 'required' but will install if present
  $modules[] = 'image';//because we need hook_permission to be registered for the next round of enabling
  module_enable($modules, TRUE);
}



function cforge_setup_basic() {
  global $language;
  //set the first day of the week to sunday for english lanaguage.
  variable_set(
    'first_day',
    in_array($language->language, array('en')) ? 0 : 1
  );

  //grant roles to the number 1 account
  user_save(user_load(1), array('roles' => array(RID_SYSTEM => RID_SYSTEM)));

  variable_set('anonymous', t("Visitor"));
  variable_set('site_offline_message', t("Community Forge has taken your site offline briefly for maintenance. Thank you for your patience."));
  variable_set('site_slogan', t("Your slogan here"));
  variable_set('site_frontpage', "home");
  variable_set('user_register', "2");
  variable_set('user_failed_login_ip_limit', 10);
  cforge_setup_contacts();

  mcapi_update_7006();

  _field_info_collate_types(TRUE);
  db_truncate('role_permission');
  $modules = array(
    'cforge_docs',
    'cforge_offline',
    'cforge_gallery',
  );
  //these modules must all run AFTER this installation profile
  module_enable($modules, TRUE);
  $modules[] = 'cforge_currencies';
  $modules[] = 'cforge_yell';
  $modules[] = 'cforge_events';
  $modules[] = 'cforge_launch';
  db_update('system')->fields(array('weight' => 1001))->condition('name', $modules)->execute();
}

function cforge_add_body_field($entity, $bundle, $label = 'Body') {
  // Add or remove the body field, as needed.
  $field = field_info_field('body');
  if (empty($field)) {
    $field = array(
      'field_name' => 'body',
      'type' => 'text_with_summary',
      'entity_types' => array('node', 'transaction', 'comment'),
    );
    $field = field_create_field($field);
  }
  $instance = field_info_instance('node', 'body', $bundle);
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'body',
      'entity_type' => 'node',
      'bundle' => $bundle,
      'label' => $label,
      'widget' => array('type' => 'text_textarea'),
      'settings' => array(
        'display_summary' => FALSE,
        'text_processing' => TRUE //this needs to be put into an update if it works
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary',
        ),
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/*
 * for each of the old profile field types, we create a new field here
 */
function cforge_setup_profile_field($row, $fieldname) {
  $row = (object)$row;
  if (field_read_instance('user', $fieldname, 'user', array('include_inactive' => TRUE))) return TRUE;
  switch ($row->type) {
    case 'textarea':
      _matslats_make_profilefield_text($fieldname, 'text_long');
      _matslats_make_profile_instance('text', $fieldname, 'text_textarea', 'text_default', $row);
      return TRUE;
    case 'textfield':
      _matslats_make_profilefield_text($fieldname, 'text');
      _matslats_make_profile_instance('text', $fieldname, 'text_textfield', 'text_default', $row);
      return TRUE;
    case 'checkbox':
      _matslats_make_profilefield_boolean($fieldname);
      _matslats_make_profile_instance('options', $fieldname, 'options_onoff', 'list_default', $row);
      return TRUE;
    case 'selection':
      _matslats_make_profilefield_list($fieldname, $row->options);
      _matslats_make_profile_instance('options', $fieldname, 'options_select', 'list_default', $row);
      return TRUE;
    default:
      drupal_Set_message ("profile fieldtype not supported. Unable to update: ".print_r($row, 1), 'warning');
      return FALSE;
  }
}

function _matslats_make_profilefield_list($fieldname, $options) {
  $field_def = array(
    'entity_types' => array(),
    'settings' => array(
      'allowed_values' => drupal_map_assoc(explode("\n", str_replace("\r", '', $options)))
    ),
    'field_name' => $fieldname,
    'type' => 'list_text',
    'module' => 'list',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'columns' => array(
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => false,
      ),
    ),
    'bundles' => array(
      'user' => array(
        0 => 'user',
      ),
    ),
  );
  field_create_field($field_def);
}

function _matslats_make_profilefield_text($field_name, $type) {
  $field_def = array(
    'entity_types' => array(),
    'translatable' => '0',
    'field_name' => $field_name,
    'type' => $type,
    'cardinality' => $field_name == 'profile_phone1' ? 2 : 1,
    'module' => 'text',
    'columns' => array(
      'value' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'summary' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'bundles' => array (
      'user' => array (
        0 => 'user',
      ),
    ),
  );
  field_create_field($field_def);
}
function _matslats_make_profilefield_boolean($field_name) {
  $field_def = array (
    'translatable' => '0',
    'entity_types' => array (),
    'settings' => array (
      'allowed_values' => array (
        0 => '0',
        1 => '1',
      )
    ),
    'field_name' => $field_name,
    'type' => 'list_boolean',
    'module' => 'list',
    'active' => '1',
    'columns' => array (
      'value' =>  array (
        'type' => 'int',
        'not null' => false,
      ),
    ),
    'bundles' => array (
      'user' => array (
        0 => 'user',
      ),
    ),
  );
  field_create_field($field_def);
}
function _matslats_make_profile_instance($module, $field_name, $widget_type, $display_default_type, $data) {
  if (field_read_instance('user', $field_name, 'user', array('include_inactive' => TRUE))) return;
  $instance = array(
    'label' => $data->title,
    'field_name' => $field_name,
    'entity_type' => 'user',
    'bundle' => 'user',
    'description' => $data->description,
    'widget' => array(
      'weight' => $data->weight,
      'type' => $widget_type,
      'module' => $module,
      'active' => 1,
      'settings' =>array(
        'display_label' => TRUE //this applies to checkboxes only
      )
    ),
    'settings' => array(
      'user_register_form' => $data->register,
      'text_processing' => 0,//keep it simple
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => $display_default_type,
        'settings' => array(),
        'module' => 'text',
        'weight' => $data->weight,
      )
    ),
    'required' => $data->required,
  );
  field_create_instance($instance);
}

function cforge_backup_restore_setup() {
  //backup_restore settings
  $nodata = array ('cache', 'cache_block', 'cache_filter',  'cache_form', 'cache_hierarchical_select',
    'cache_menu', 'cache_page', 'cache_update', 'cache_views', 'cache_views_data', 'captcha_points', 'captcha_sessions',
    'flood',  'search_dataset', 'search_index', 'search_node_links', 'search_total', 'semaphore', 'sessions'
  );
  $filters = array(
    'compression' => 'zip',
    'notify_success_enable' => 0,
    'notify_success_email' => 'admin@matslats.net',
    'notify_failure_enable' => 0,
    'notify_failure_email' => 'admin@matslats.net',
    'utils_site_offline' => 0,
    'utils_site_offline_message' => t('Community Forge has taken your site offline briefly for maintenance. Thank you for your patience.'),
    'exclude_tables' => array (),
    'nodata_tables' => drupal_map_assoc($nodata),
    'utils_lock_tables' => 1
  );
  db_query(
      "UPDATE backup_migrate_profiles
      SET name = 'Cforge_backup', filename = 'cforge', append_timestamp = 1, timestamp_format = 'Y-m-d\\TH-i-s', filters = :filters
      WHERE profile_id = 'default'",
    array(':filters' => serialize($filters))
  );
}
/**
 * Implements hook_update_dependencies().
 */
function cforge_update_dependencies() {
  $dependencies = array(
    'user' => array(
      7000 => array(
        'cforge' => 6999
      )
    ),
    'token' => array(
      7000 => array(
        'cforge' => 6999
      )
    ),
    'cforge' =>array(
      7000 => array(
        'mcapi' => 7009, //
        'offers_wants' => 7001,
        'filter' => 7000, //renames the filter_formats table
        'system' => 7001,
      ),
      7001 => array(//alter the upgraded vocab fields
        'taxonomy' => 7004//upgrade the vocab fields
      ),
      7003 => array(//sort out the images
        'node' => 7006,//sort out node types before upgrading image field
        'system' => 7063, //where the upload field is created,
        'user' => 7012, //when the profile pics are converted to the file managed table
      ),
     ),
    'system' => array(
      7001 => array(
        'cforge' => 6999,
      )
    ),
    'block' => array(
      7002 => array(//renames the blocks table
        'cforge' => 6999//deletes the 'manage' block
      )
    ),
    'date' => array(
      7000 => array(
        'system' => 7020
      )
    ),
    'views' => array(
      7000 => array(
        'system' => 7020
      )
    ),
    'user' => array(
      7002 => array(
        'profile' => 7002,
        'filter' => 7010,
        'cforge' => 6999
      ),
    )
  );
  return $dependencies;
}

/*
 * upgrade procedure
 * start by checking for the system table and ensuring the cforge profile is enabled
 * I think this is a drupal bug
 */
$tables = db_query("SHOW TABLES")->fetchCol();
if (in_array('system', $tables)) {//that means the core database is installed
  db_query("UPDATE {system} SET status  = 1 WHERE name = 'cforge'");
  if (db_query("SELECT TRUE FROM {system} WHERE name = 'system' AND schema_version < 7000")->fetchField()) {
    drupal_set_message('disabling some modules in preparation for upgrade. they will be reenabled later');
    db_query("UPDATE {system} SET status  = 0 WHERE name in ('calendar', 'role_expire', 'ctools', 'views', 'views_ui', 'l10n_update', 'date_views', 'devel')");
  }
}


/**
 * preliminaries - requiring no dependencies
 */
function cforge_update_6999() {

  cforge_reset_translations();
  //unfortunately the upgrade process leaves customised d6 menu links untouched
  //rather than reset everything, we're going to delete piecemeal
  db_delete('menu_links')->condition('menu_name', 'manage')->execute();
  db_delete('menu_custom')->condition('menu_name', 'manage')->execute();
  db_query("DELETE FROM {menu_links} WHERE customized = 1 AND link_path LIKE '%build%'");
  db_query("DELETE FROM {menu_links} WHERE customized = 1 AND link_path LIKE '%settings%'");
  db_query("DELETE FROM {menu_links} WHERE customized = 1 AND link_path LIKE 'node/add%'");
  db_query("DELETE FROM {menu_links} WHERE customized = 1 AND link_path LIKE 'admin/report%'");
  db_update('menu_links')->fields(array('menu_name' => 'main-menu'))->condition('menu_name', 'primary-links');

  //we'll rebuild all the menu links from scratch using a different mechanism
  db_query("DELETE FROM {menu_links} WHERE module = 'cforge_custom'");

  //the following are legacies or they may have been moved around and will be replaced by defaults
  db_delete('menu_links')->condition('link_path', array(
    'admin/content/simplenews',
    'admin/cforge',
    'user/register',
    'user',
    'news/recent',
    'admin/config/ow',
    'admin/content',
    'admin/content/node',
    'user/logout',//this didn't work on SdL
    'user/statement', 'user/directory', 'user/balance_sheet', 'user/balances', 'invite'//these are seldulac relics
  ))->execute();

  db_query("UPDATE {node} SET type = 'story' WHERE type = 'simplenews'");
  db_delete('node_type')->condition('name', 'simplenews');

  //this variable affects whether the upload instance is created on each node type
  db_query("DELETE FROM {variable} WHERE name LIKE 'upload_%'");
  variable_set('upload_document', TRUE);
  variable_set('upload_story', TRUE);

  db_query("DELETE FROM {variable} WHERE name LIKE 'comment_%'");
  _cf_make_bundle_commentable('story');
  _cf_make_bundle_commentable('image');
  _cf_make_bundle_commentable('proposition');
  _cf_make_bundle_commentable('event');
  //ensure these bundles aren't commented
  _cf_make_bundle_commentable('community', FALSE);
  _cf_make_bundle_commentable('page', FALSE);
  _cf_make_bundle_commentable('document', FALSE);

  //while ($row = db_fetch_object($result)) {
    //$pids[$row->rid] = $row->$pid;
  //}
  $pids = db_select('permission', 'p')
    ->fields('p', array('rid', 'pid'))
    ->orderby('pid', 'ASC')
    ->execute()->fetchAllKeyed('rid');
  db_delete('permission')->condition('pid', $pids, 'NOT IN')->execute();

  //date is a pernicious and flakey module does not upgrade well.
  db_delete('system')->condition('name', array('date', 'cforge_custom'))->execute();
  db_delete('blocks')->condition('delta', 'manage')->execute();
  module_enable(array('ctools', 'date_views'));
}


/**
 * should run after vocabs table is updated
 */
function cforge_update_7000() {

  cforge_setup_user_fields();
  cforge_features_pre_install();

  //tidies up a glitch in the fieldAPI upgrade
  db_query("DELETE from {field_config_instance} where bundle = ''");

  //the old simplenews vocab not needed any more
  //taxonomy_vocabulary_delete(taxonomy_vocabulary_machine_name_load('vocabulary_2')->vid);

  drupal_path_alias_whitelist_rebuild();

  //the folder holding the mone-go-round.gif has been renamed, so we'll find and replace the path on the home page
  $home = db_query("SELECT source from {url_alias} WHERE alias = 'home'")->fetchField();
  if ($home) {
    $node = node_load(substr($home, 5));
    $body = &$node->body[LANGUAGE_NONE][0]['value'];
    $body = str_replace('cforge/content/', 'cforge/default_content/', $body);
    node_save($node);
  }

  //ensure the body field has the right settings as the default upgrade is cumbersome
  //$field = current(_update_7000_field_read_fields(array('field_name' => 'body')));
  foreach (field_read_instances(array('field_name' => 'body')) as $instance) {
    $instance['settings']['display_summary'] = FALSE;
    field_update_instance($instance);
  }
}



/**
 * update profile fields, since the d6 profile module maintainers seem to have failed to do the honourable thing
 */
function cforge_update_7001() {
  //alter the cludgy upgraded fieldnames for the image gallery and docs vocabulary
  _cf_rename_upgraded_vocab_field(
    db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE module = 'image_gallery'")->fetchField(),//should always be 3, from cforge_custom
    'galleries',
    'cforge_gallery'
  );
  $vid = substr(strrchr(db_query(
    "SELECT field_name FROM {field_config_instance} WHERE bundle = 'document' and field_name like '%vocab%'"
    )->fetchField(), '_'), 1);
  _cf_rename_upgraded_vocab_field($vid, 'cforge_docs_categories', 'cforge_docs');

  cforge_features_install();
  _field_info_collate_types(TRUE);

  $profile_fields = db_query(
    "SELECT fid, title, name, explanation as description, type, weight, required, register
    FROM {profile_field} WHERE name != 'profile_phone2'
    ORDER BY weight"
  )->fetchAll();
  foreach ($profile_fields as $row) {
    if ($row->name == 'profile_notes')$row->weight = 20;
    $machine_name = &$row->name;
    if (!cforge_setup_profile_field($row, $machine_name)) continue;
    //populate the field
    $values = db_query(
      "SELECT 'user' as entity_type, 'user' as bundle, uid as entity_id, uid as revision_id, 'und' as language, 0 as delta, value
      FROM {profile_value}
      WHERE fid = $row->fid"
    )->fetchAllAssoc('entity_id', PDO::FETCH_ASSOC);
    //ensure booleans have value 0 instead of NULL
    if ($row->type == 'checkbox') {
      foreach ($values as $key => $value) {
        $values[$key]['value'] = $value['value'] ? 1 : 0;
      }
    }
    //these fields, for the field_data_$fieldname table, assume that the field has only one column, named after the field
    //however text fields have another column storing the format, which we'll try to get away with leaving null
    $field_names = array('entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta', $machine_name.'_value');
    $q1 = db_insert('field_data_'.$machine_name)->fields($field_names);
    $q2 = db_insert('field_revision_'.$machine_name)->fields($field_names);
    foreach ($values as $set) {
      $q1->values(array_values($set));
      $q2->values(array_values($set));
    }
    $q1->execute();
    $q2->execute();
  }
  //populate the second phone number
  $phones2 = db_query(
    "SELECT 'user' as entity_type,
      'user' as bundle,
      uid as entity_id,
      uid as revision_id,
      'und' as language,
      1 as delta,
      value as profile_phone1_value,
      'plain_text' as profile_phone1_format
    FROM {profile_value} v LEFT JOIN {profile_field} f ON f.fid = v.fid
    WHERE f.name = 'profile_phone2'"
  )->fetchAllAssoc('entity_id', PDO::FETCH_ASSOC);
  foreach ($phones2 as $row) {
    if (empty($row->profile_phone1_value)) continue;
    drupal_write_record('field_data_profile_phone1', $row);
    drupal_write_record('field_revision_profile_phone1', $row);
  }
  drupal_set_message('check that phone1 and phone2 migrated into the same profile field');

}

/**
 * other misc updates and featurish modules
 */
function cforge_update_7002() {
  //move these two new blocks out of the region where they were placed by default,
  db_update('block')->fields(array('status' => 0))->condition('delta', array('navigation', 'management'))->execute();

  variable_set('views_ui_show_sql_query', TRUE);
  variable_set('views_ui_show_advanced_column', TRUE);
  variable_set('views_ui_show_master_display', TRUE);

  foreach (db_select('filter_format', 'ff')->fields('ff', array('name', 'format'))->execute()->fetchAllKeyed(0) as $name => $format) {
    if (is_numeric($format)) {
      cf_rename_filter_format($name, $format);
    }
  }
  cforge_custom_menus();
  module_enable(array('views_data_export', 'advanced_help', 'calendar', 'ckeditor', 'date', 'cforge_gallery'));
  cforge_upgrade_install();

  $files_dir = conf_path() . '/files';
  variable_set('file_public_path', $files_dir);
  variable_set('file_private_path', $files_dir.'/private');

  //drop the address currently stored in site_mission
  variable_set('site_mission', '');
  variable_set('cache', 1);
}



/**
 * migrate images (hat-tip image_legacy module alpha1)
 */
function cforge_update_7003() {
  $nids = db_query("SELECT nid FROM {node} WHERE type = 'image'")->fetchCol();
  foreach ($nids as $nid) {
    //moves images from {files} table to {files_managed} and {file_usage}
    _cforge_update_d6_image_files($nid);
  }
  drupal_set_message('updated d6 image files');
  $olddata = db_query(
    "SELECT * FROM {image} i
    LEFT JOIN {file_managed} f ON i.fid = f.fid
    WHERE i.image_size = '_original'"
  )->fetchAllAssoc('nid');
  foreach (node_load_multiple($nids) as $nid => $node) {
    $node->image[LANGUAGE_NONE][0] = array(
      'fid' => $olddata[$nid]->fid,
      'alt' => $node->title,
      'title' => $node->title,
    );
    node_save($node);
  }
  drupal_set_message('changing the id of the image field');
  //pretty horrid bug where the field_id of instances of the imagefield is wrong)
  $image_field_id = db_select('field_config', 'f')
    ->fields('f', array('id'))
    ->condition('field_name', 'image')
    ->execute()
    ->fetchField();
  db_update('field_config_instance')
  ->fields(array('field_id' => $image_field_id))
  ->condition('field_name', 'image')
  ->execute();
}

/**
 * cleanup from d6
 */
function cforge_update_7004() {
  if (db_select('field_config')->condition('field_name', 'taxonomyextra')->countQuery()->execute()->fetchField()) {
    db_truncate('field_data_taxonomyextra')->execute();
    _update_7000_field_delete_field('taxonomyextra');
  }
  $view = views_get_view('recent_news');
  if ($view) views_delete_view($view);

  require_once('includes/locale.inc');
  module_disable(array('profile'));
  drupal_uninstall_modules(array('profile'));

  db_drop_table('access');
  db_drop_table('content_node_field');
  db_drop_table('content_node_instance');
  db_drop_table('content_node_field_instance');
  db_drop_table('cache_content');
  db_drop_table('d6_upgrade_filter');
  db_drop_table('files');
  db_drop_table('image');
  db_drop_table('imagecache_action');
  db_drop_table('imagecache_preset');
  db_drop_table('image_attach');
  db_drop_table('simplenews_mail_spool');
  db_drop_table('simplenews_newsletters');
  db_drop_table('simplenews_snid_tid');
  db_drop_table('simplenews_subscriptions');
  db_drop_table('simplenews_content_types');
  db_drop_table('simplenews_vid');
  db_drop_table('tb_added_list');
  db_drop_table('tb_customized');
  db_drop_table('user_import');
  db_drop_table('user_import_errors');
  db_drop_table('zipcodes');//not sure how this got into macasel or what module its from
  db_drop_table('taxonomy_term_relation');
  db_drop_table('views_object_cache');

  db_query("DELETE FROM {variable} WHERE name LIKE '%simplenews%'");
  //taxonomy xml was originally installed to import the vocabs
  variable_del('taxonomy_xml_duplicate');
	variable_del('taxonomy_xml_format');
	variable_del('taxonomy_xml_identifier');
	variable_del('taxonomy_xml_recurse_down');
	variable_del('taxonomy_xml_reuseids');
	variable_del('taxonomy_xml_service_id');
	variable_del('taxonomy_xml_source_selector');
	variable_del('taxonomy_xml_url');
	variable_del('taxonomy_xml_vid');
	variable_del('cforge_report');

  db_query("DELETE FROM {field_config_instance} WHERE bundle IN ('comment_node_simplenews')");


  //the old simplenews vocab not needed any more
  if ($vocab = taxonomy_vocabulary_load(2)) {
    taxonomy_vocabulary_delete(2);
  }

  //ensure that accounts with the system role do not also have the trader role
  $uids = db_query("SELECT uid FROM {users_roles} WHERE rid = :rid", array(':rid' => RID_SYSTEM))->fetchCol();
  db_delete("users_roles")->condition('uid', $uids)->condition('rid', RID_TRADER)->execute();

  //now all the content types are installed, we can disable the comment subjects
  foreach (node_type_get_types() as $type) {
    variable_set('comment_subject_field_' . $type->type, 0);
  }
  cforge_install_node_save('story', t("Major site upgrade"), _cf_upgrade_message(), 'full_html', 0, $alias = 'd7upgrade');
  cf_setup_rss();
  variable_set('maintenance_mode', 0);
  cforge_set_permissions();
}

/**
 * This very important update function is used as part of the installation
 * Everything in here needs to be done on both old and new sites
 */
function cforge_update_7005() {
  module_enable(array('cforge_hosted'));//this module is for sites hosted by cforge only
  if (variable_get('user1')) {
    module_load_install('cforge_hosted');
    if (function_exists('cforge_hosted_disable')) {
      cforge_hosted_disable(FALSE);
    }
    variable_del('user1');
  }
  user_save(user_load(1), array());

  configure_ckeditor();

  if (module_exists('captcha')) {
    variable_set('captcha_persistance', '1');
    variable_set('captcha_description', t('This CAPTCHA field proves you are human and prevents robots creating accounts'));
    if (module_exists('image_captcha')) {
      variable_set('captcha_default_challenge', 'image_captcha/Image');
    }
  }

  //tell all the node types what menus they can go in and what default flags are checked
  variable_set('menu_options_page', array('main-menu', 'secondary-menu', 'visitors'));
  foreach (array_keys(_update_7000_node_get_types()) as $type) {
    variable_set('node_options_'.$type, array('status'));
    if ($type == 'page') continue;
    variable_set('menu_options_'. $type, array());
  }

  variable_set('mimemail_sitestyle', 0);
  variable_set('mimemail_format', 'filtered_html');

  variable_set('l10n_client_use_server', '4');
  variable_set('l10n_update_check_disabled', "0");
  variable_set('l10n_update_check_frequency', "1");
  variable_set('l10n_update_check_mode', "3");
  variable_set('l10n_update_download_store', "sites/all/translations");
  variable_set('l10n_update_import_mode', "0");
  variable_set('site_offline', "0");//set this explicitly otherwise drush can't later

  variable_set('preprocess_css', TRUE);
  variable_set('preprocess_js', TRUE);

  variable_set('user_pictures', "1");
  variable_set('user_picture_dimensions', '1280x1024');
  variable_set('user_picture_file_size', '1024');
  variable_set('user_picture_default', 'profiles/cforge/default_content/anonymous.jpg');
  variable_set('user_picture_style', 'thumbnail');

  //upload settings
  variable_set('upload_uploadsize_default', 5);
  variable_set('upload_usersize_default', 25);

  //some defaults...before language variables installed
  //TODO have a look at this instead: function locale_date_format_save($langcode, $type, $format)
  variable_set('date_format_short', t("d-m-y"));
  variable_set('date_format_medium', t("H:i, D jS M"));
  variable_set('date_format_long', t("H:i, l jS F, Y"));

  variable_set('user_cancel_method', 'user_cancel_block');
  variable_set('user_register', 0);
  variable_set('admin_theme', 'seven');

  variable_set('cforge_mail_footer', t('Mail generated by @site', array('@site' => variable_get('site_name'))) ."\n".
    '<a href="[user:url]">'. t('Visit your account page').'</a>');

  cforge_reset_mail_templates();
}


function configure_ckeditor() {
  //these are merged into the filter_format table using the 'format' property
  $filtered_html_format =  (object)array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($filtered_html_format);

  $full_html_format = (object)array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_format);

  //rename the formats as installed by the ckeditor module
  db_query("UPDATE {ckeditor_input_format} SET format ='editor_filtered_html', name = 'Basic' WHERE name = 'Full'");
  db_query("UPDATE {ckeditor_input_format} SET format ='editor_full_html' WHERE name = 'Advanced'");
  $basic_settings = array (
    'ss' => '2',
    'default' => 't',
    'show_toggle' => 't',
    'skin' => 'kama',
    'uicolor' => 'default',
    'uicolor_textarea' => '<p>Click the <strong>UI Color Picker</strong> button to set your color preferences.</p>',
    'uicolor_user' => 'default',
    'toolbar' => '[[\'Bold\',\'Italic\',\'-\',\'NumberedList\',\'BulletedList\',\'-\',\'Link\',\'Unlink\',\'Image\']]',
    'expand' => 't',
    'width' => '100%',
    'lang' => 'en',
    'auto_lang' => 't',
    'language_direction' => 'default',
    'enter_mode' => 'p',
    'shift_enter_mode' => 'br',
    'font_format' => 'p;div;pre;address;h1;h2;h3;h4;h5;h6',
    'custom_formatting' => 'f',
    'formatting' => array(
      'custom_formatting_options' => array(
        'indent' => 'indent',
        'breakBeforeOpen' => 'breakBeforeOpen',
        'breakAfterOpen' => 'breakAfterOpen',
        'breakAfterClose' => 'breakAfterClose',
        'breakBeforeClose' => 0,
        'pre_indent' => 0,
      ),
    ),
    'css_mode' => 'none',
    'css_path' => '',
    'css_style' => 'theme',
    'styles_path' => '',
    'filebrowser' => 'none',
    'filebrowser_image' => '',
    'filebrowser_flash' => '',
    'UserFilesPath' => '%b%f/',
    'UserFilesAbsolutePath' => '%d%b%f/',
    'ckeditor_load_method' => 'ckeditor.js',
    'ckeditor_load_time_out' => '0',
    'forcePasteAsPlainText' => 'f',
    'html_entities' => 't',
    'scayt_autoStartup' => 'f',
    'theme_config_js' => 'f',
    'js_conf' => '',
  );
  db_query("UPDATE {ckeditor_settings} SET name = 'Basic', settings = :settings WHERE name = 'Full'",
    array(':settings' => serialize($basic_settings))
  );
  //put the new filter formats at the top, so they appear as defaults
  db_query("REPLACE INTO {filter_format} (format, name, cache, status, weight) VALUES
    ('editor_filtered_html', 'Editor filtered HTML', 1, 1, -10),
    ('editor_full_html', 'Editor full HTML', 1, 1, -9);");
  db_query("UPDATE {filter_format} SET weight = -8 WHERE format = 'filtered_html'");
  db_query("UPDATE {filter_format} SET weight = -7 WHERE format = 'full_html'");
  db_query("UPDATE {filter_format} SET weight = -6 WHERE format = 'plain_text'");

  filter_formats_reset();
  $perms =  array('use text format filtered_html');
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $perms);
  $perms[] = 'use text format editor_filtered_html';
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $perms);
  $perms[] = 'use text format editor_full_html';
  user_role_grant_permissions(RID_COMITTEE, $perms);
  variable_set('filter_fallback_format', 'plain_text');
}

function cf_rename_filter_format($filter_name, $old_format) {
  $new_format = strtolower(str_replace(' ', '_', $filter_name));

  db_update('block_custom')
    ->fields(array('format' => $new_format))
    ->condition('format', $old_format)
    ->execute();
  db_update('role_permission')
    ->fields(array('permission' => "use text format $new_format"))
    ->condition('permission', "use text format $old_format")
    ->execute();

  //get a list of the fields generated by the text module
  module_load_install('field');
  foreach (_update_7000_field_read_fields(array('module' => 'text')) as $fid => $info) {
    $data_table = 'field_data_'.$info['field_name'];
    $revision_table = 'field_revision_'.$info['field_name'];
    $column_name = $info['field_name'] .'_format';
    db_update($data_table)
      ->fields(array($column_name => $new_format))
      ->condition($column_name, $old_format)
      ->execute();
    db_update($revision_table)
      ->fields(array($column_name => $new_format))
      ->condition($column_name, $old_format)
      ->execute();
  }
  drupal_set_message("Changing machine name of filter '$filter_name' from '$old_format' to '$new_format'");
  db_update('filter_format')
    ->fields(array('format' => $new_format))
    ->condition('format', $old_format)
    ->execute();
  filter_formats_reset();
}

//vocabs names were created using vocab ids, but this function renames them as if they were created in d7
function _cf_rename_upgraded_vocab_field($vid, $field_name, $module) {
  $vocab = taxonomy_vocabulary_load($vid);
  if (empty($vocab)) {
    drupal_set_message("Failed to load vocab $vid for module $module"); return;
  }
  if (substr($vocab->machine_name, 0, 11) != 'vocabulary_') return;
  $old_field = 'taxonomy_'.$vocab->machine_name;
  $vocab->machine_name = $field_name;
  $vocab->module = $module;
  taxonomy_vocabulary_save($vocab);

  $data_table = 'field_data_'.$field_name;
  $revision_table = 'field_revision_'.$field_name;
  $old_column = $old_field ."_tid";
  $new_column = $field_name ."_tid";
  db_query("UPDATE {taxonomy_vocabulary} SET module = '$module', machine_name = '$field_name' WHERE vid = $vid");
  db_query("UPDATE {field_config} SET field_name = '$field_name' where field_name = '$old_field'");
  db_query("UPDATE {field_config_instance} SET field_name = '$field_name' where field_name = '$old_field'");
  db_rename_table('field_data_'.$old_field, $data_table);
  db_rename_table('field_revision_'.$old_field, $revision_table);
  db_query("ALTER TABLE {$data_table} CHANGE $old_column $new_column int(10) unsigned DEFAULT NULL");
  db_query("ALTER TABLE {$revision_table} CHANGE $old_column $new_column int(10) unsigned DEFAULT NULL");
}

function cf_setup_rss() {
  module_enable(array('aggregator'));
  $edit = array(
    'title' => t('Community Forge news'),
    'url' => 'http://communityforge.net/news/feed/fr',
    'refresh' => 32400,
    'block' => 5,
    'fid' => db_query("SELECT fid FROM {aggregator_feed} WHERE title = :title", array(':title' => t('Community Forge news')))->fetchField()
  );
  aggregator_save_feed($edit);
}


function cforge_custom_menus() {
  //add the custom menus
  menu_save(array(
    'menu_name' => 'visitors',
    'title' => t("Visitor menu"),
    'description' => t('For visitors who are not logged in')
  ));
  menu_save(array(
    'menu_name' => 'secondary-menu',//this is because that's how it worked in Drupal6
    'title' => t('Secondary links menu'),
    'description' => t('Less important links, for all users')
  ));
  variable_set('menu_secondary_links_source', 'secondary-menu');//as in cforge
  variable_set('menu_main_links_source', 'main-menu');//as in cforge
}



function _cforge_update_d6_image_files($nid) {
  $files_dir = conf_path() . '/files';
  //this will cover the profile pics which are converted in user_update_7012
  db_query("UPDATE file_managed SET uri = REPLACE(uri, '$files_dir', 'public://')");

  // Get all files for this image node.
  $files = db_query("SELECT * FROM {files} f JOIN {image} i ON f.fid = i.fid WHERE i.nid = $nid")->fetchAllAssoc('fid');
  // Convert entries in {files} to ones in {managed_file}.
  foreach ($files as $file) {
    if ($file->filename == '_original') {
      // Insert the file into the {file_managed} table.
      $fields = array(
        'uid' => $file->uid,
        'filename' => basename($file->filepath),
        'uri' => 'public://' . str_replace(variable_get('file_public_path', $files_dir), '', $file->filepath),
        'filemime' => $file->filemime,
        'filesize' => $file->filesize,
        'status' => $file->status,
        'timestamp' => $file->timestamp,
      );
      unset($file->filepath);
      debug('adding file: '.$file->nid);
      file_usage_add($file, 'image', 'node', $file->nid);
      // Update {image} with the new file ID.
      db_query("UPDATE {image} SET fid = :new_fid WHERE nid = :nid",
        array(
          ':new_fid' => db_insert('file_managed')->fields($fields)->execute(),
          ':nid' => $file->nid
        )
      );
    }
    else {
      file_unmanaged_delete($file->filepath);
    }
  }
}


function _cf_make_bundle_commentable($type, $val = TRUE) {
  if ($val) {
    variable_set('comment_'.$type, 2);
    variable_set('comment_anonymous_'.$type, 0);
    variable_set('comment_default_mode_'.$type, 1);
    variable_set('comment_default_per_page_'.$type, 50);
    variable_set('comment_form_location_'.$type, 1);
    variable_set('comment_preview_'.$type, 0);
    variable_set('comment_subject_field_'.$type, 0);
  }
  else {
    variable_set('comment_'.$type, 0);
    variable_del('comment_anonymous_'.$type);
    variable_del('comment_default_mode_'.$type);
    variable_del('comment_default_per_page_'.$type);
    variable_del('comment_form_location_'.$type);
    variable_del('comment_preview_'.$type);
    variable_del('comment_subject_field_'.$type);
  }
}


function cforge_setup_theme_menu() {
  cforge_custom_menus();
  module_enable(array('cforge_currencies', 'cforge_events', 'cforge_yell'));
  theme_enable(array('sky_seldulac'));
  variable_set('theme_default', 'sky_seldulac');
  cache_clear_all(NULL, 'cache_bootstrap');drupal_set_message('check that user_pending block visibility is 1');
  cforge_reset_blocks();
  cforge_create_content();
}

/*
 * hard reset overwrites
 * imports the installation profile first, then borrows from l10n_update
 */
function cforge_reset_translations() {
  if (!module_exists('locale')) return;
  include_once('includes/locale.inc');
  $langs = array_keys(locale_language_list($field = 'name', $all = FALSE));
  $successes = array();
  foreach ($langs as $langcode) {
    if ($langcode == 'en') continue;
    $files = file_scan_directory('profiles/cforge', '/(^|\.)'. $langcode .'\.po$/');
    foreach ($files as $file) {
      if (_locale_import_po($file, $langcode, LOCALE_IMPORT_KEEP, 'default')) {
        $successes[] = basename($file->uri);
      }
    }
  }
  drupal_set_message('Imported files: '.implode(', ', $successes));
}

/*
 * drush callback
 */
function cforge_set_permissions() {
  drupal_load_updates();//loads all the .install files
  //registry_rebuild();
  _node_types_build(TRUE);

  $all_permissions = array(
    DRUPAL_ANONYMOUS_RID => array(
      'access content', 'access site-wide contact form', 'access news feeds'
    ),
    DRUPAL_AUTHENTICATED_RID => array(
      'access comments', 'access content', 'access site-wide contact form',
      'access user contact forms', 'search content', 'use advanced search',
      'view own unpublished content', 'access news feeds'
    ),
    RID_TRADER => array(
      'access user profiles', 'edit own comments', 'post comments',
      'view advanced help index', 'view advanced help popup', 'view advanced help topic',
      'cf_broadcast'
    ),
    RID_COMMITTEE => array(
      'administer users', 'administer comments', 'administer nodes', 'bypass node access',
      'access content overview', 'create url aliases', 'skip comment approval',
      'perform backup', 'administer menu',
    )
  );
  if (module_exists('community_tasks')) {
    $all_permissions[DRUPAL_AUTHENTICATED_RID][] = 'view tasks';
    $all_permissions[RID_TRADER][] = 'commit to tasks';
  }
  foreach (module_implements('cf_role_permissions') as $module) {
    $function = $module.'_cf_role_permissions';
    foreach ($function() as $rid => $perms) {
      if (empty($all_permissions[$rid]))$all_permissions[$rid] = array();
      $all_permissions[$rid] = array_merge((array)$all_permissions[$rid], $perms);
    }
  }
  if (module_exists('community_tasks')) {
    $permissions[RID_COMMITTEE][] = 'edit tasks';
  }
  foreach ($all_permissions as $rid => $permissions) {
    user_role_grant_permissions($rid, $permissions);
  }
  //because this profile isn't in the list of modules yet
  _update_7000_user_role_grant_permissions(RID_COMMITTEE, array('cf_broadcast'), 'cforge');
}

/**
 * ensure all users have their contact flag enabled
 */
function cforge_update_7006() {
  variable_get('contact_default_status', 1);

  foreach (db_select('users', 'u')
    ->fields('u', array('uid', 'data'))
    ->condition('uid', '1', '>')
    ->execute()->fetchAllKeyed(0) as $uid => $data) {
    $data = unserialize($data);
    unset($data['profile_firstname'], $data['profile_familyname'], $data['mc_limits'], $data['form_build_id'], $data['mimemail_textonly']);
    $data['contact'] = TRUE;
    db_update('users')->fields(array('data' => serialize($data)))->condition('uid', $uid)->execute();
  }
}
/**
 * grant committee permission to administer comments
 */
function cforge_update_7007() {
  user_role_grant_permissions(RID_COMMITTEE, array('administer comments'));
}
/**
 * convert filters in blocks, reset translations and reset default mails
 */
function cforge_update_7008() {
  db_update('block_custom')->fields(array('format' => 'full_html'))->execute();
  cforge_reset_translations();
  cforge_reset_mail_templates();
}

/**
 * Enable rich text mail
 */
function cforge_update_7010() {
  module_enable(array('mailsystem', 'mimemail'));
  variable_set('mimemail_sitestyle', 0);
  variable_set('mimemail_format', 'filtered_html');
  variable_set('mailsystem_default_system', 'MimeMailSystem');
}
/*
 * fix a duplication of secondary menu blocks
 */
function cforge_update_7011() {
  db_delete('block')->condition('module', 'menu')->condition('delta', 'secondary-menu')->execute();
  db_query("UPDATE {block} SET module = 'menu' WHERE delta = 'secondary-menu'");
}

function cforge_update_7012() {
  //only pages can go into menus, and only into the three visible menus
  foreach (node_type_get_names() as $name => $title) {
    $varname = 'menu_options_'. $name;
    $menus = $name == 'page' ?  array('main-menu', 'secondary-menu', 'visitors') : array();
    variable_set($varname, $menus);
  }
}
/**
 * set default visibilities for user profile fields (new feature)
 */
function cforge_update_7013() {
  variable_set('cf_profile_permissions', array(
    'profile_firstname' => '1',
    'profile_familyname' => '1',
    'profile_responsibility' => '0',
    'profile_phone1' => '1',
    'profile_address' => '2',
    'profile_locality' => '1',
    'profile_notes' => '3',
    'profile_postal' => '2',
  ));
}
/**
 * Ensure image captcha is enabled
 * set user profile text fields to user processed text i.e. with filters.
 */
function cforge_update_7014() {
  $fields = field_read_fields(array('type' => array('text_long', 'text_with_summary')));
  foreach (field_read_instances(array('field_name' => array_keys($fields))) as $instance) {
    $instance['settings']['text_processing'] = TRUE;
    field_update_instance($instance);
  }
  module_enable(array('image_captcha'));
  variable_set('captcha_default_challenge', 'image_captcha/Image');
}

/**
 * field adjustments which only notice in multilingual sites
 * populate the navigation bar using blocks instead of logic in template.php
 */
function cforge_update_7016() {
  //ensure all the user fields are NOT translatable
  $fields = db_select('field_config_instance', 'i')->fields('i', array('field_name'))->condition('entity_type', 'user')->execute()->fetchCol();
  foreach ($fields as $field_name) {
    $field = field_read_field($field_name);
    $field['translatable'] = 0;
    field_update_field($field);
  }
  //disable text processing for the address and notes fields
  $instance = field_read_instance('user', 'profile_address', 'user');
  $instance['settings']['text_processing'] = 0;
  field_update_instance($instance);
  $instance = field_read_instance('user', 'profile_notes', 'user');
  $instance['settings']['text_processing'] = 0;
  field_update_instance($instance);

  cforge_reset_blocks('system');

  module_load_include('module', 'cforge');
  upgrade_filter_formats();
}
/*
 * all updates after this point will have be careful of the theme & menu, because of the likeabee fork
 */



/*
 * temp
 */
function upgrade_filter_formats() {
  module_load_install('cforge');
  $formats = db_select('filter_format', 'ff')->fields('ff', array('name', 'format'))->execute()->fetchAllKeyed(0);
  foreach ($formats as $name => $format) {
    if (is_numeric($format)) cf_rename_filter_format($name, $format);
  }
  global $language;
}

/*
 * implements cforge hook_block_setup_THEME
 */
function cforge_block_setup_sky_seldulac() {
  $blocks[] = array(
    'module' => 'search',
    'delta' => 'form',
    'region' => 'headerright',
    'weight' => 1,
    'title' => '<none>',
  );
  $blocks[] = array(
    'module' => 'system',
    'delta' => 'help',
    'region' => 'content',
    'weight' => -1,
    'title' => '',
  );
  $blocks[] = array(
    'module' => 'system',
    'delta' => 'main',
    'region' => 'content',
    'weight' => 0,
    'title' => '',
  );
  $blocks[] = array(
    'module' => 'system',
    'delta' => 'user-menu',
    'region' => 'sidebar_second',
    'weight' => -20,
  );
  $blocks[] = array(
    'module' => 'system',
    'delta' => 'main-menu',
    'region' => 'navigation',
    'weight' => 1,
    'roles' => array(DRUPAL_AUTHENTICATED_RID),
    'title' => '<none>'
  );
  $blocks[] = array(
    'module' => 'menu',
    'delta' => 'visitors',
    'region' => 'navigation',
    'weight' => 2,
    'roles' => array(DRUPAL_ANONYMOUS_RID, RID_COMMITTEE),
    'title' => '<none>'
  );
  $blocks[] = array(
    'module' => 'menu',
    'delta' => 'secondary-menu',
    'region' => 'headerright',
    'weight' => 2,
    'title' => '<none>'
  );
  $blocks[] = array(
    'module' => 'comment',
    'delta' => 'recent',
    'weight' => 2,
    'comment_block_count' => 5,
  );
  $blocks[] = array(
    'module' => 'user',
    'delta' => 'login',
    'region' => 'sidebar_second',
    'weight' => 6,
  );
  $blocks[] = array(
    'module' => 'user',
    'delta' => 'new',
    'weight' => 7,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "<front>\nnews\nmembers",
    'user_block_whois_new_count' => 5,
    'roles' => array(DRUPAL_AUTHENTICATED_RID)
  );
  $blocks[] = array(
    'module' => 'aggregator',
    'delta' => 'feed-1',
    'weight' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news*',
    'cache' => 1,
  );
  return $blocks;
}

/*
 * drush callback
 */
function cforge_reset_blocks($module = NULL) {
  drupal_load_updates();//loads all the .install files
  //this hook hasn't been declared in a hook_hook_info, but seems to work
  //could do some work on block on block caching but I don't know when and how block caches are cleared
  //DRUPAL_CACHE_PER_USER
  //DRUPAL_CACHE_PER_ROLE
  //DRUPAL_CACHE_PER_PAGE
  //DRUPAL_CACHE_CUSTOM
  //DRUPAL_CACHE_GLOBAL
  $defaults = array(//defaults to a permanent block with no title no cache
    'title' => '',
    'status' => 1,
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,//shows everywhere
    'pages' => '',//except nowhere
    'custom' => FALSE, //not sure what this is for
    'roles' => array(),
    'region' => 'sidebar_first'
  );
  $theme = variable_get('theme_default');
  //this is because the
  $hook = 'block_setup_'.$theme;
  foreach (module_invoke_all($hook) as $block) {
    if ($module && $module != $block['module']) continue;
    $values = $block + $defaults;
    $values['regions'][$theme] = $values['region'] ? $values['region'] : 'sidebar_first';
    unset($values['region']);
    $form_state = array('values' => $values);
    module_load_include('admin.inc', 'block');
    //this form isn't suitable for using with drupal_form_submit because it picks default from the database
    block_admin_configure_submit(array(), $form_state);
    //unfortunately the weight is not saved in that form
    //so we save the weight separately
    if (!isset($values['weight'])) continue;
    db_update('block')
      ->fields(array('weight' => $values['weight']))
      ->condition('module', $values['module'])
      ->condition('delta', $values['delta'])
      ->condition('theme', $theme)
      ->execute();
  }
  _block_rehash();
}


function cforge_reset_mail_templates() {
  //for when the administrator creates an account
  variable_set('user_mail_register_admin_created_subject', t("Your new account at !site"));
  variable_set('user_mail_register_admin_created_body', implode("\n\n", array(
    "[user:name]",
    t('A site administrator at !site has created an account for you. You may now log in to [site:login-url] using the following username and password:'),
    t("Username: [user:name]
password: !password"),
    t("You may log in now by clicking on this link or copying and pasting it in your browser:"),
    "[user:one-time-login-url]\n".
    t('This is a one-time login, so it can be used only once.'),
    t('After logging in, you will be redirected to [user:edit-url] so you can change your password.')
  )));

  //for when the user creates an account
  variable_set('user_mail_register_pending_approval_subject', t("Account details for !username at !site (pending admin approval)"));
  variable_set('user_mail_register_pending_approval_body', implode("\n\n", array(
    "[user:name]",
    t('Thank you for registering at [site:name]. Your application for an account is currently pending approval. Once it has been approved, you will receive another e-mail containing information about how to log in, set your password, and other details.')
  )));

  //for when an account is unblocked.
  variable_set('user_mail_status_activated_subject', t("Account details for !username at !site (approved)"));
  variable_set('user_mail_status_activated_body', implode("\n\n", array(
    "[user:name]",
    t('Your account at !site has been activated.'),
    t("You may log in now by clicking on this link or copying and pasting it in your browser:"),
    "[user:one-time-login-url]\n".
    t('This is a one-time login, so it can be used only once.'),
    t('After logging in, you will be redirected to [user:edit-url] so you can change your password.')
  )));
}



function cforge_create_content() {

  global $language;
  $content_dir = __DIR__.'/default_content';
  //retrieve the default content
  $path = $content_dir.'/'.$language->language;
  if (!is_dir($path)) {
    $path = $content_dir.'/'.'en';
  }
  $level1 = scandir($path);
  unset($level1[0], $level1[1]);//get rid of the ./ and ../
  foreach ($level1 as $item) {
    if (is_dir($path .'/'. $item)) {
      $menupath = $path .'/'. $item;
      $files = scandir($menupath);
      unset($files[0], $files[1]);
      foreach($files as $filename) {
        cforge_save_content($menupath, $filename, $item);
      }
    }
    else {
      cforge_save_content($path, $item);
    }
  }
  //also make a special node from the cforge site
  cforge_install_node_save(
    'story',
    t('Step by step guide to setting up your site'),
    cforge_cut('http://communityforge.net/'.$language->language.'/step-by-step', '<cfscrape>', '</cfscrape>'),
    'full_html',
    0,
    'step-by-step'
  );
  drupal_path_alias_whitelist_rebuild();
  cf_setup_rss();
}


function cforge_save_content($path, $file, $menuname = NULL) {
  global $language;
  list($filename, $extension) = explode('.', $file);
  switch ($extension) {
    case 'txt': $format = 'plain_text'; break;
    case 'htm': $format = 'full_html'; break;//TODO when I'm not so tired
    default: return;
  }
  list($weight, $machine_name) = explode('_', $filename);
  $filepath = $path .'/'. $file;
  $content = file_get_contents($filepath);
  cforge_install_node_save(
    $menuname ? 'page' : 'story',
    cf_strstr($content , "\n", TRUE),//firstline of content is the title
    cf_strstr($content , "\n", FALSE),
    $format,
    $weight,
    $machine_name,
    $menuname
  );
}

function cforge_install_node_save($type, $title, $body, $format, $weight, $alias = '', $menuname = '') {
  //global $language;
  //$lan = $language->language;
  $node = array(
    'type' => $type,
    'uid' => '1',
    'status' => '1',
    'comment' => '0',
    'sticky' => '0',
    'format' => $format,
    'language' => LANGUAGE_NONE,
    'title' => $title,
    'body' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $body,
          'summary' => text_summary($body, $format),
          'format' => $format
        )
      )
    )
  );
  if ($alias) {
    $node['path']['alias'] = $alias;
  }
  if ($menuname) {
    $node['menu'] = array(
      'link_title' => $title,
      'description' => '',
      'menu_name' => $menuname,
      'module' => 'menu',
      'weight' => $weight,
      'enabled' => TRUE
    );
  }
  $node = (object)$node;
  node_save($node);
}


function cf_strstr($haystack, $needle, $before_needle=FALSE) {
  //Find the position of $needle
  $pos = strpos(strtolower($haystack), strtolower($needle));
  //If $needle not found, abort
  if($pos===FALSE) return FALSE;
  //get everything from 0 to $pos?
  if($before_needle) return substr($haystack,0,$pos);
  //otherwise, go from $pos to end
  return substr($haystack,$pos);
}



function cforge_cut($url, $start, $end) {
  ini_set('allow_url_fopen', TRUE);
  $content = @file_get_contents($url);
  if($content) {
    $content = substr($content, strpos($content, $start) + strlen($start));
    $content = substr($content, 0, strpos($content, $end));
    //this is nasty, but for the javascript fieldsets to work, we have to remove a linebreak which was inserted by the scraping
    $content = str_replace("/legend>\n", "/legend>", $content);
    return $content;
  }
  else {
    return t('was unable to to retrieve: @url', array('@url' => $url));
  }
}

function _cf_upgrade_message() {
  global $language;
  switch ($language->language) {
    default: return '<a href="http://matslats.net/sites/default/files/matslats_logo.jpg"><img src = "http://matslats.net/sites/default/files/matslats_logo.jpg" width = "150" align = "right" /></a>
<p>You may have noticed a few slight improvements to site. Every 2 or 3 years, a new
version of Drupal, the software framework which this site is built with, is released,
and every site built with it, must be upgraded. This is a lot of work, but in the long
run it keeps costs down, page-load times down, and makes it easy for volunteer developers
to contribute.</p>
<p>Over the last 18 months, our volunteer developer Matthew has been upgrading
the Community Accounting module which makes LETS possible in Drupal, and then
he upgraded and migrated over 50 active web sites and another 100 dormant ones hosted by Community Forge</p>
<p>There are few improvements on the surface as well.</p>
<dl>
<dt>Local Admin</dt>
  <dd>Please add your coordinates on the \'Information\' page</dd>
  <dd>Admin can no longer set a proposition expiry period</dd>
  <dd>You have more control over balance limits on the currency edit page.</dd>
  <dd>You can enable/disable some modules yourself</dd>
  <dd><a href="intertrade-setup">Intertrading</a> is allowed, if your accounts are in order</dd>
  <dd>You are invited to enter your coordinates for when we make a map!</dd>
  <dd>The mysql dump works differently</dd>
<dt>Accountant</dt>
  <dd>Transactions can no longer be edited.</dd>
  <dd>Role expiry is now in an optional module (disabled by default) called Cforge subscriptions</dd>
<dt>Committee</dt>
  <dd>Manage menu is now in user menu</dd>
  <dd>Newsletters are merged with stories. Use \'Story\' and the \'send to everyone\' button.</dd>
  <dd>At the bottom of the story edit page you can choose whether to include it in the news stream or hide it</dd>
  <dd>New users are granted the trader role by default</dd>
<dt>Members</dt>
  <dd>proposition expiry date is days from now, not date itself</dd>
  <dd>there is a new rss feed on the /news page</dd>
  <dd>The central account has the same name as the site (used to be called admin)</dd>
<dt>user 1</dt>
  <dd>Custom views may have broken fields</dd>
</dl>
<p>Note that event dates were not upgradable.</p>';
  }
}
function cforge_setup_contacts() {
  $site_mail = variable_get('site_mail', '');
  db_truncate('contact');
  //contact settings
  db_query(
    "REPLACE INTO {contact} (category, recipients, reply, weight, selected) VALUES
      (:info, '$site_mail', '', 1, 1),
      (:mem, '$site_mail', '', 2, 0),
      (:act, '$site_mail', '', 3, 0),
      (:acc, '$site_mail', '', 4, 0),
      (:webtec, '$site_mail', '', 5, 0),
      (:webcon, '$site_mail', '', 6, 0),
      (:med, '$site_mail', '', 7, 0),
      (:imp, 'installations@communityforge.net', '', 9, 0),
      (:build, 'feedback@communityforge.net', '', 10, 0)",
    array(
      ':info' => t('Informatastion request'),
      ':mem' => t('Membership'),
      ':act' => t('Activities'),
      ':acc' => t('Accounting'),
      ':webtec' => t('Website (tech)'),
      ':webcon' => t('Website (content)'),
      ':med' => t('Mediation'),
      ':imp' => t('Suggest how to improve this site'),
      ':build' => t('Contact the builder of this site'),
    )
  );
}