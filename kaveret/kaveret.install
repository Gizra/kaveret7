<?php
// $Id: standard.install,v 1.28 2010/10/21 04:22:34 webchick Exp $

/**
 * Implements hook_install().
 */
function kaveret_install() {
  kaveret_standard_install();

  _kaveret_theme_setup();


  // Set required date API variables.
  // See date_api_status().
  date_default_timezone_set('Asia/Jerusalem');
  variable_set('date_default_timezone', 'Asia/Jerusalem');
  variable_set('date_first_day', 1);
  variable_set('date_format_medium', 'D, Y-m-d H:i');
  variable_set('date_format_medium_no_time', 'D, Y-m-d');

  // Set default front page.
  variable_set('site_frontpage', 'home');
}

/**
 * Helper function; Setup theme.
 */
function _kaveret_theme_setup() {
  // Disable bartik.
  theme_disable(array('bartik'));

  variable_set('theme_default', 'beezy');
  theme_enable(array('beezy'));
  variable_set('theme_beezy_settings', array (
    'toggle_logo' => 1,
    'toggle_name' => 0,
    'toggle_slogan' => 0,
    'toggle_node_user_picture' => 1,
    'toggle_comment_user_picture' => 1,
    'toggle_comment_user_verification' => 0,
    'toggle_favicon' => 1,
    'toggle_main_menu' => 0,
    'toggle_secondary_menu' => 1,
    'default_logo' => 1,
    'logo_path' => '',
    'logo_upload' => '',
    'default_favicon' => 1,
    'favicon_path' => '',
    'favicon_upload' => '',
    'sasson_show_grid' => 0,
    'sasson_grid_width' => '960px',
    'sasson_columns' => '16',
    'sasson_gutter_width' => '20px',
    'sasson_sidebar_first' => '4',
    'sasson_sidebar_second' => '4',
    'sasson_responsive' => 1,
    'sasson_responsive_approach' => 'desktop_first',
    'sasson_responsive_narrow' => '960px',
    'sasson_responsive_narrower' => '767px',
    'sasson_responsive_narrowest' => '480px',
    'sasson_responsive_mf_small' => '480px',
    'sasson_responsive_mf_medium' => '767px',
    'sasson_responsive_mf_large' => '960px',
    'sasson_responsive_menus_width' => '480px',
    'sasson_responsive_menus_selectors' => 'ul#main-menu-links, ul#secondary-menu-links',
    'sasson_responsive_menus_autohide' => 1,
    'sasson_sass' => 1,
    'sasson_devel' => 1,
    'sasson_images_path' => '',
    'sasson_fonts_path' => '',
    'sasson_stylesheets_path' => '',
    'sasson_sass_recompile' => 0,
    'sasson_sprites_recompile' => 0,
    'sasson_cssreset' => 'normalize',
    'sasson_formalize' => 0,
    'sasson_force_ie' => 1,
    'sasson_html5shiv' => 1,
    'sasson_ie_comments' => 1,
    'sasson_prompt_cf' => 'IE 7',
    'sasson_font' => '',
    'sasson_font_fallback' => 'sans-serif',
    'sasson_font_selectors' => 'body',
    'sasson_watcher' => 0,
    'sasson_watch_file' => 'sites/likeabee.net/themes/beezy/styles/beezy.scss',
    'sasson_instant_watcher' => 1,
    'sasson_overlay' => 0,
    'sasson_overlay_url' => '',
    'sasson_overlay_opacity' => '0.5',
    'sasson_breadcrumb_hideonlyfront' => 1,
    'sasson_breadcrumb_showtitle' => 0,
    'sasson_breadcrumb_separator' => 'Â»',
    'sasson_feed_icons' => 0,
    'sasson_settings__active_tab' => 'edit-sasson-general',
  ));
}

/**
 * Copied from Standard profile -- standard_install()
 */
function kaveret_standard_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(filter_permission_name($filtered_html_format)));

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'bartik');

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
    'machine_name' => 'tags',
    'name' => 'Tags',
    'description' => $description,
    'help' => $help,
  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => $vocabulary->name,
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);

  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);

  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => 'Home',
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  variable_set('menu_rebuild_needed', TRUE);

  node_access_rebuild(TRUE);

  // Set Mimemail email format.
  variable_set('mimemail_format', 'full_html');

  // Set the contact form address.
  $data = contact_load(1);
  $data['recipients'] = 'kaveret@gizra.com';
  drupal_write_record('contact', $data, array('cid'));
}
