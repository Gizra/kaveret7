<?php

/**
 * @file
 */

include_once 'kaveret_accounting.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function kaveret_accounting_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_data().
 */
function kaveret_accounting_views_data() {
  $data['mcapi_transactions']['description'] = array(
    'title' => t('Description'),
    'help' => t('Display a description of a transaction.'),
    'real field' => 'xid',
    'field' => array(
      'handler' => 'kaveret_accounting_transaction_description',
    ),
  );
  return $data;
}

/**
 * Implements hook_mcapiforms_default_alter().
 */
function kaveret_accounting_mcapiforms_default_alter($forms) {
  $forms['1stparty']->data['direction']['widget'] = 'radios';
}

/**
 * Implements hook_mcapicurrencies_default().
 *
 * Create the Bees currency.
 */
function kaveret_accounting_mcapicurrencies_default_alter(&$currencies) {
  $mcapicurrency = new stdClass();
  $mcapicurrency->disabled = FALSE; /* Edit this to true to make a default mcapicurrency disabled initially */
  $mcapicurrency->api_version = 3;
  $mcapicurrency->currcode = 'bz';

  $mcapicurrency->data = (object) array(
    'info' => array(
      'currcode' => 'bz',
    ),
    'human_name' => 'Bees',
    'uid' => '1',
    'reservoir' => '1',
    'display' => array(
      'divisions' => '0',
      'divisions_setting' => '0|/.
25|1/4
50|1/2
75|3/4',
      'delimiter' => ':',
      'format' => '<span class="code">BZ</span> <span class="quantity">[quantity]</span>',
      'zero' => '',
    ),
    'additional_settings' => array(
      'additional_settings__active_tab' => 'edit-access',
    ),
    'access' => array(
      'membership' => 'user_chooser_segment_perms:transact',
      'trader_data' => 'user_chooser_segment_perms:transact',
      'system_data' => 'user_chooser_segment_perms:transact',
    ),
    'view_transaction_states' => array(
      1 => array(
        'transaction_access_callback_perm_transact' => 'transaction_access_callback_perm_transact',
        'transaction_access_callback_perm_manage_all' => 'transaction_access_callback_perm_manage_all',
        'transaction_access_callback_payee' => 0,
        'transaction_access_callback_payer' => 0,
        'transaction_access_callback_open' => 0,
      ),
      0 => array(
        'transaction_access_callback_perm_transact' => 0,
        'transaction_access_callback_perm_manage_all' => 0,
        'transaction_access_callback_payee' => 0,
        'transaction_access_callback_payer' => 0,
        'transaction_access_callback_open' => 0,
      ),
    ),
    'access_operations' => array(
      'undo' => array(
        'transaction_access_callback_perm_manage_all' => 'transaction_access_callback_perm_manage_all',
        'transaction_access_callback_perm_transact' => 0,
        'transaction_access_callback_payee' => 0,
        'transaction_access_callback_payer' => 0,
        'transaction_access_callback_open' => 0,
      ),
    ),
    'buttons' => array(
      'delete' => 'Delete',
    ),
    'limits' => array(
      'limits_callback' => 'limits_global',
      'limits_global' => array(
        'min' => -500,
      ),
      'skip' => array(
        'reservoir' => 'reservoir',
        'auto' => FALSE,
        'mass' => FALSE,
        'user1' => FALSE,
        'owner' => FALSE,
      ),
    )
  );

  // Override the other default currencies.
  $currencies = array($mcapicurrency->currcode => $mcapicurrency);
  return $currencies;
}

/**
 * Implements hook_user_insert().
 *
 * Add Beez to a new user.
 */
function kaveret_accounting_user_insert(&$edit, $account, $category) {
  kaveret_accounting_balances_member($account->uid, 'bz','auto',300 ,0);
}

/**
 * Credit a user with Beez from the Federal Reservoir.
 *
 * @param $uid
 *   The user ID.
 * @param $currcode
 *   The currency code.
 * @param $type
 *   The transaction event.
 * @param $balance
 *   The credit amount.
 * @param $gross_income
 *   The bruto income.
 */
function kaveret_accounting_balances_member($uid, $currcode, $type, $balance, $gross_income = 0) {
  $currency = currency_load($currcode);
  $transactions = array();
  $values = array(
    'type' => $type,
    'state' => TRANSACTION_STATE_FINISHED,
    'currcode' => $currcode
  );

  if ($gross_income) {
    $gross_expenditure = $gross_income - $balance;
    $in = $values;
    $out = clone($values);
    $in['quantity'] = $gross_expenditure;
    $in['payer'] = $currency->reservoir;
    $in['payee'] = $uid;
    $transactions[] =  entity_create('transaction', $in);
    $out['quantity'] = $gross_income;
    $out['payer'] = $uid;
    $out['payee'] = $currency->reservoir;
    if ($desc_field = variable_get('transaction_description_field', '')) {
      $in['description'] = t("Gross income");
      $out['description'] = t("Gross expenditure");
    }
    $transactions[] =  entity_create('transaction', $out);
  }
  elseif ($balance != 0) {//if there is only balance, we do one exchange, which is simply + balance
    if ($balance > 0) {
      $values['payer'] = $currency->reservoir;
      $values['payee'] = $uid;
      $values['quantity'] = $balance;
    }
    else {
      $values['payer'] = $uid;
      $values['payee'] = $currency->reservoir;
      $values['quantity'] = -$balance;
    }
    if ($desc_field = variable_get('transaction_description_field', '')) {
      $values['description'] = t("Carried Forward");
    }
    $transactions[] = entity_create('transaction', $values);
  }
  if ($transactions) {
    transaction_cluster_write($transactions, TRUE);
  }
}
