<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once 'kaveret_offer.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function kaveret_offer_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter the node form of request and offer and remove revision ID field from
 * their comments.
 */
function kaveret_offer_form_alter(&$form, &$form_state, $form_id) {
  // Offer and request node forms.
  if (in_array($form_id, array('offer_node_form', 'request_node_form'))) {
    $node = $form_state['node'];
    if (empty($node->nid)) {
      // Allow overriding the type.
      drupal_set_title($node->type == 'request' ? t('I would like to request') : t('I would like to offer'));
    }

    $form['field_expiry_after'][LANGUAGE_NONE]['#options']['_none'] = t('Never');

    $form['field_expiry_date']['#access'] = FALSE;
  }
  // Offer and request comments forms.
  elseif (in_array($form_id, array('comment_node_offer_form', 'comment_node_request_form'))) {
    $form['field_vid']['#access'] = FALSE;

    // Copy the status field into the comment form.
    $node = $form['#node'];
    $temp_form = array();
    field_attach_form('node', $node, $temp_form, $form_state);
    $form['field_status'] = $temp_form['field_status'];
  }
}

/**
 * Implements hook_field_access().
 *
 * Hide the "expired" field.
 */
function kaveret_offer_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_expired') {
    return FALSE;
  }
}

/**
 * Implements hook_node_presave().
 *
 * Set the expiry date of offers and requests accoring to the "Delete after"
 * setting.
 */
function kaveret_offer_node_presave($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->field_expiry_after->value()) {
    return;
  }

  // Calculate the expiry date by applying the expiry_after value (E.g.
  // "+1 day") to the time the node was updated.
  $expiry_date = strtotime($wrapper->field_expiry_after->value(), $node->changed);
  $wrapper->field_expiry_date->set($expiry_date);
}

/**
 * Comment preprocess.
 *
 * Add all the fields that have changed from previous comment.
 */
function kaveret_offer_preprocess_comment(&$variables) {
  $comment = $variables['comment'];
  $node = $variables['node'];
  $variables['changed_fields'] = '';

  $cache = &drupal_static(__FUNCTION__, array());
  // Cache all revisions of the current node.
  if (isset($cache['revisions'])) {
    $revisions = $cache['revisions'];
  }
  else {
    // Load all node revisions.
    $revisions = array();
    foreach (array_keys(node_revision_list($node)) as $vid) {
      $revisions[$vid] = node_load($node->nid, $vid);
    }
    $cache['revisions'] = $revisions;
  }

  if (isset($cache[$node->nid])) {
    $thread = $cache[$node->nid];
  }
  else {
    $thread = comment_get_thread($node, COMMENT_MODE_FLAT, 1000);
    $cache[$node->nid] = $thread;
  }

  $wrapper = entity_metadata_wrapper('comment', $comment);
  if (!$comment_vid = $wrapper->field_vid->value()) {
    return;
  }

  $node_revision = $revisions[$comment_vid];
  $wrapper = entity_metadata_wrapper('node', $node_revision);

  // Find the task revision that was created after the comment was saved, in
  // order to find the changes that were made with the comment.
  $next_vid = NULL;
  foreach(array_keys($revisions) as $vid) {
    if ($vid == $comment_vid) {
      break;
    }
    $next_vid = $vid;
  }

  $node_next_revision = $revisions[$next_vid];
  $next_wrapper = entity_metadata_wrapper('node', $node_next_revision);

  if ($wrapper->field_status->value() != $next_wrapper->field_status->value()) {
    $variables['changed_fields'] = t('Status: @previous Â» @current', array('@previous' => $wrapper->field_status->label(), '@current' => $next_wrapper->field_status->label()));
  }
}

/**
 * Implements hook_cron().
 *
 * Set nodes as "Expired" when their expiry date is due.
 */
function kaveret_offer_cron() {
  $terms = taxonomy_get_term_by_name('Expired', 'offer_statuses');
  $tid = key($terms);

  // Find offers and requests with an expiry date in the past.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', array('offer', 'request'), 'IN')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_expiry_date', 'value', 'now', '<')
    // Ignore nodes that are already expired.
    ->fieldCondition('field_expired', 'value', FALSE)
    ->fieldCondition('field_status', 'target_id', $tid, '<>')
    ->execute();

  if (empty($result['node'])) {
    return;
  }

  foreach(node_load_multiple(array_keys($result['node'])) as $node) {
    // Set the node as expired.
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_expired->set(TRUE);
    $wrapper->save();

    // Post a comment and set the node as expired (Using field_status).
    $comment = (object)array(
      'nid' => $node->nid,
      // TODO: We can create a "System Message" user, like in drupal.org.
      'uid' => 1,
      'cid' => 0,
      'pid' => 0,
      'is_anonymous' => 0,
      'status' => COMMENT_PUBLISHED,
      'language' => LANGUAGE_NONE,
      'subject' => '',
      'field_status' => array(LANGUAGE_NONE => array(array('target_id' => $tid))),
      // TODO: Should the value be translated?
      'comment_body' => array(LANGUAGE_NONE => array(array('value' => 'Expired', 'format' => 'plain_text'))),
    );
    comment_save($comment);
  }
}

/**
 * Implements hook_comment_presave().
 *
 * Save update the node status according to the setting on the comment.
 */
function kaveret_offer_comment_presave($comment) {
  $wrapper = entity_metadata_wrapper('comment', $comment);
  $node = $wrapper->node->value();

  // Set the values from the comment on the offer/ request node.
  $value = $comment->field_status[LANGUAGE_NONE][0]['target_id'];
  $original_value = $node->field_status[LANGUAGE_NONE][0]['target_id'];

  // Check if the field was changed on the comment.
  if ($value != $original_value) {
    $wrapper->node->field_status->set($value);
    // Set the revision ID to the node ID before it is saved.
    $wrapper->field_vid->set($node->vid);
    $node->revision = TRUE;
    node_save($node);
  }
}
