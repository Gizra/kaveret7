<?php
// $Id:
/*
 * User chooser module
 *
 * Just a special form field at the moment, no configuration pages
 * Use it like this:
 * $form['fieldname'] = array(
 *   '#title' => t('Blah blah'),
 *   '#type' => 'user_chooser', // or user_chooser_roles, user_chooser_permissions, user_chooser_callback, user_chooser_preselect
 *   '#args' => array('callback_function') // or the role ids or the permission key or the view and display ids
 *   '#allow_me => boolean  defaults to FALSE //Why would a user want to select themselves?
 *   '#allow_blocked' defaults to FALSE
 *   //etc.
 * );
 * where $callback is 'permission', 'role', or your own callback
 * your own callback should return a list of usernames, with uid keys
 *
 * This module will modify $form_state[values][fieldname] to be the uid, regardless of what was selected
 */

function user_chooser_menu() {
  $items['system/ajax/uchoo'] = array(
    'page callback' => 'uchoo_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uchoo.inc'
  );
  $items['admin/config/people/user_chooser'] = array(
    'title' => 'User Chooser Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uchoo_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'uchoo.inc',
    'weight' => 5
  );
  return $items;
}

function user_chooser_hook_info() {
  return array(
    //implementations of this hook return a array of $callback => description
    //where the callback returns a list of account numbers
    'user_chooser_preselect' => array()
  );
}

/*
 * implements hook_element_info
 * the three elements we are offer are essentially the same
 */
function user_chooser_element_info() {
  $fields = array(
    '#input' => TRUE,
    '#process' => array('process_uchoo'),
    '#args' => array(),
    '#theme_wrappers' => array('form_element'),
    '#element_validate' => array('user_chooser_validate'),
    '#value_callback' => 'user_chooser_value_callback',
    '#multiple' => FALSE,
    '#allow_me' => FALSE,
    '#multiple_fail_alert' => 1,//values 0 no alert, 1 warning, 2 error
    '#accepts' => array('mail', 'uid', 'name'),
    '#allow_blocked' => 0 //just to be explicit
  );
  foreach (uchoo_types() as $type) {
    $info[$type] = $fields;
  }
  return $info;
}

//these provide ways of carving up the user database by providing a callback and parameters
//each of these could have an access callback and this function could have its own hook
function uchoo_types() {
  return array(
    'user_chooser_callback',
    'user_chooser_preselect',
    'user_chooser_roles',
    'user_chooser_permissions'
  );
}

/*
 * Callback function to process the form element
 * provides all the other metadata for the form element
 */
function process_uchoo($element, &$form_state) {
  form_load_include($form_state, 'inc', 'user_chooser', 'uchoo');
  return _process_uchoo($element, $form_state);
}


/*
 * ajax menu callback
 * the autocomplete a textfield uses get and so you have no access to the form and can't retrieve the triggering element
 * so this is a special callback which expects the path and the $element['name']
 * then it retrieves the triggering element and returns only valid users
 */
function uchoo_autocomplete() {
  $args = func_get_args();
  $string = array_pop($args);
  $element_name = array_pop($args);
  $form_build_id = array_pop($args);
  //see ajax_get_form
  $form = form_get_cache($form_build_id, form_state_defaults());
  if (!$form) drupal_exit();

  // Since some of the submit handlers are run, redirects need to be disabled.
  $form_state['no_redirect'] = TRUE;
  $form_state['rebuild_info']['copy']['#build_id'] = TRUE;
  $form_state['rebuild_info']['copy']['#action'] = TRUE;
  //we don't need to process the form - we just wanted the $element

  $uids = uchoo_get_valid_uids($form[$element_name], $string, TRUE);
  die(drupal_json_output(drupal_map_assoc(uchoo_display_all($uids))));
}

/*
 * ACCESS CALLBACKS
 * these two are needed by mutual_credit module
 * but the idea of introducing access control to this module is very interesting
 * that would mean an access callback for every uchoo_type. Thrilling!
 */
function user_chooser_permissions($perms) {
  foreach ((array)$perms as $perm) {
    if (user_access($perm)) return TRUE;
  }
  return FALSE;
}

//access callback
function user_chooser_roles($rid1) {
  //array_intersect is type-sensitive, so we'll do it this way
  $user_roles = $GLOBALS['user']->roles;
  foreach (func_get_args() as $rid) {
    if (isset($user_roles[$rid])) return TRUE;
  }
}

/*
 * These have to go in the module file because the include isn't made in time.
 */
/*
 * value_callback to replace form_type_ELEMENT_TYPE_value
 */
function user_chooser_value_callback_callback(&$element, $edit = FALSE, &$form_state) {
  if (empty($edit)) return;
  module_load_include('inc', 'user_chooser', 'uchoo');
  $function = isset($element['#value']) ? $element['#value'] : $element['#default_value'];
  //replace the submitted callback with the values it returns
  $element['#value'] = $function($element, $form_state);
  _uchoo_set_value($element, (array)$edit, $form_state);
}
/*
 * value_callback to replace form_type_ELEMENT_TYPE_value
 */
function user_chooser_value_callback(&$element, $edit = FALSE, &$form_state) {
  if (empty($edit)) return;
  module_load_include('inc', 'user_chooser', 'uchoo');
  return _uchoo_set_value($element, (array)$edit, $form_state);
}